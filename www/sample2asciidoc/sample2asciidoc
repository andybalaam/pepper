#!/usr/bin/env python

import os
import tempfile
import subprocess
import sys

output_ext = ".asciidoc"

input_exts = (
	".eeyore",
	".eeyorelexed",
	".eeyoreparsed",
	".cpp",
	".output",
	)

formatters = {
	".eeyore"          : "python",
	".cpp"             : "cpp",
	".eeyoreparsed" : "python"
	}

def ext_matches( filename, exts ):
	for ext in exts:
		if filename.endswith( ext ) and len( filename ) > len( ext ):
			return ext
	return None

if len( sys.argv ) < 2:
	sys.stderr.write( "You must supply a sample asciidoc to generate.\n" )
	sys.exit( 1 )

output_dir = os.path.dirname( sys.argv[1] )

# If this is a "real" sample, i.e. run as a unit test, find it in
# the source directory.
sample_dir = output_dir.replace( "real_samples/", "../src/test/" )

sample_name = os.path.basename( sample_dir )

input_files = {}

for fn in os.listdir( sample_dir ):
	ext = ext_matches( fn, input_exts )
	if ext is not None:
		with open( os.path.join( sample_dir, fn ), "r" ) as infl:
				input_files[ ext ] = ( fn, infl.read() )


def get_formatter( ext ):
	if ext in formatters:
		return "[source,%s]" % formatters[ext]
	return ""

def get_title( ext, filename ):
	if ext == ".output":
		return "(fiction)"
	else:
		return filename


def read_file( filename ):
	with file( filename, "r" ) as fl:
		return fl.read()

def temp_out_file( prefix, suffix = "" ):
	return tempfile.NamedTemporaryFile( mode="w", prefix="s2a" + prefix,
		suffix = suffix )

def run_cmd( args, cwd ):
	"""Runs a command and returns its return code, its standard output and its
	standard error."""

	with temp_out_file( "out" ) as stdoutfl:
		with temp_out_file( "err" ) as stderrfl:
			retval = subprocess.call( args=args, stdout=stdoutfl,
				stderr=stderrfl, cwd=cwd )
			stdout = read_file( stdoutfl.name )
			stderr = read_file( stderrfl.name )

	return ( retval, stdout, stderr )

def write_step( output_file, prev_name, thisfl, ext, cwd ):

	this_name = thisfl[0]
	this_cont = thisfl[1]

	fact_or_fiction = "fiction"

	if prev_name is not None and ext != ".output":

		with temp_out_file( "this", ext ) as outfile:
			ret, out, err = run_cmd(
				( "eeyore", "-o", outfile.name, prev_name ),
				cwd )
			contents = read_file( outfile.name )

		if ( ret == 0 ) and ( contents == this_cont ):
			fact_or_fiction = "fact"

		if prev_name is not None:
			print fact_or_fiction, prev_name, this_name

		output_file.write( ( """
.({fact_or_fiction})
----
$ eeyore -o {this_name} {prev_name}
----
""" ).format(
				fact_or_fiction = fact_or_fiction,
				prev_name       = prev_name,
				this_name       = this_name,
			) )

	output_file.write( ( """
{formatter}
.{title}
----
{text}
----
"""
		).format(
			formatter = get_formatter( ext ),
			title     = get_title( ext, this_name ),
			text      = this_cont,
		) )


if not os.path.isdir( output_dir ):
	os.makedirs( output_dir )

output_filename = os.path.join( output_dir, sample_name + output_ext )
with open( output_filename, "w" ) as output_file:

	prev_name = None
	for ext in input_exts:
		if ext in input_files:
			thisfl = input_files[ext]
			write_step( output_file, prev_name, thisfl, ext, sample_dir )
			prev_name = thisfl[0]

