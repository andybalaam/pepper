
import sys

float size = 100.0

def void svg_start( int unused ):
    print( "<svg xmlns:svg='http://www.w3.org/2000/svg' xmlns='http://www.w3.org/2000/svg' width='100' height='100'>" )

def void svg_draw_line( int unused, float x1, float y1, float x2, float y2 ):
    float ax1 = size * x1
    float ay1 = size * ( 1 - y1 )
    float ax2 = size * x2
    float ay2 = size * ( 1 - y2 )
    print( "  <path d='M " + ax1 + " " + ay1 + " " + ax2 + " " + ay2 + "' style='stroke:#000000;'/>" )

def void svg_draw_circle( int unused, float x, float y, float radius ):
    # TODO: print( "  <circle cx='%f' cy="%f' r='%f'/>" % ( ( size * x ), ( size * y ), ( size * radius ) )
    # TODO: allow bracketted expressions within print instead of needing variables ax etc. here
    float ax = size * x
    float ay = size * y
    float ar = size * radius
    print( "  <circle cx='" + ax + "' cy='" + ay + "' r='" + ar + "'/>" )

def void svg_end( int unused ):
    print( "</svg>" )

# TODO: have to name Vector FrameA to make sure it appears first in C++ (!)
class FrameA:
    def_init( FrameA self, int unused, float x, float y ):
        var:
            float self.x = x
            float self.y = y

class Frame:
    def_init( Frame self, int unused, FrameA va1, FrameA va2, FrameA va3 ):
        var:
            FrameA self.vb1 = va1
            FrameA self.vb2 = va2
            FrameA self.vb3 = va3

# TODO: Will only work when we can pass functions in as arguments
def void svg_document( int unused, function(void,(int, Frame)) painter ):
    svg_start( unused )
    FrameA v1 = FrameA.init(  unused, 0.0, 0.0 )
    FrameA v2 = FrameA.init(  unused, 1.0, 0.0 )
    FrameA v3 = FrameA.init(  unused, 0.0, 1.0 )
    Frame frame = Frame.init( unused, v1, v2, v3 )
    painter( unused, frame )
    svg_end( unused )

# TODO: can't currently hold len( sys.argv ) in a variable!

# TODO: Have to pass len( sys.argv ) to force runtime evaluation


def void circle_painter( int unused, Frame f ):
    svg_draw_circle( unused, 0.5, 0.5, 0.2 )

svg_document( len( sys.argv ), circle_painter )


#svg_start( len( sys.argv ) )
#
#def float xcoord( int i, int max ):
#    return 0.05 + 0.1 * i * 0.1 * i * 0.1 * i * 0.1 * i
#
#def float ycoord( int i, int max ):
#    return 0.05 + 0.1 * i * 0.1 * i
#
#def float radius( int i, int max ):
#    return 0.1 * 0.1 * i
#
#int num_circles = 10
#for int i in range( 0, num_circles + len( sys.argv ) - 1):
#    # TODO: allow line breaking
#    svg_draw_circle( len( sys.argv ), xcoord( i, num_circles ), ycoord( i, num_circles ), radius( i, num_circles ) )
#
#
#
#svg_end( len( sys.argv ) )








