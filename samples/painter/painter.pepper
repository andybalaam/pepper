# This is all based on the painter code from
# Structure and Interpretation of Computer Programs section 2.2.4.

# It is an attempt to write a functioning program in the existing version
# of Pepper, working around its many limiations.

import sys

float size = 100.0

def void svg_start( int unused ):
    print( "<svg xmlns:svg='http://www.w3.org/2000/svg' xmlns='http://www.w3.org/2000/svg' width='100' height='100'>" )

def void svg_draw_line( int unused, float x1, float y1, float x2, float y2 ):
    float ax1 = size * x1
    float ay1 = size * ( 1 - y1 )
    float ax2 = size * x2
    float ay2 = size * ( 1 - y2 )
    print( "  <path d='M " + ax1 + " " + ay1 + " " + ax2 + " " + ay2 + "' style='stroke:#000000;'/>" )

def void svg_draw_circle( int unused, float x, float y, float radius ):
    # TODO: print( "  <circle cx='%f' cy="%f' r='%f'/>" % ( ( size * x ), ( size * y ), ( size * radius ) )
    # TODO: allow bracketted expressions within print instead of needing variables ax etc. here
    float ax = size * x
    float ay = size * y
    float ar = size * radius
    print( "  <circle cx='" + ax + "' cy='" + ay + "' r='" + ar + "'/>" )

def void svg_end( int unused ):
    print( "</svg>" )

# TODO: have to name Vector FrameA to make sure it appears first in C++ (!)
class FrameA:
    def_init( FrameA self, int unused, float x, float y ):
        var:
            float self.x = x
            float self.y = y

# TODO: all my vectors have to have different names, because somehow
#       the arguments to Frame's def_init are clashing with the outer scope?
class Frame:
    def_init( Frame self, int unused, FrameA iorigin, FrameA iedge1, FrameA iedge2 ):
        var:
            FrameA self.origin = iorigin
            FrameA self.edge1  = iedge1
            FrameA self.edge2  = iedge2

# TODO: closures
# TODO: inline def-as-a-value
#def function(void,(int,Frame)) make_segments_painter( Segment[] segment_list ):
#    return def void (int unused ,Frame frame):
#        for segment in segment_list:
#
#            function( function( Vector, ( Vector, ) ), ( Frame, ) ) mapper =
#                frame_coord_map( frame )
#
#            draw_line(
#                mapper( start_segment( segment ) ),
#                mapper( end_segment(   segment ) )
#            )


#(define (transform-painter painter origin corner1 corner2)
#    (lambda (frame)
#        (let ((m (frame-coord-map frame)))
#            (let ((new-origin (m origin)))
#                (painter
#                    (make-frame new-origin
#                                (sub-vect (m corner1) new-origin)
#                                (sub-vect (m corner2) new-origin)))))))
#

# TODO: Will only work when we can pass functions in as arguments
def void svg_document( int unused, function(void,(int, Frame)) painter ):
    svg_start( unused )
    # TODO: have to make variables here instead of passing function calls as args
    FrameA v1 = FrameA.init(  unused, 0.0, 0.0 )
    FrameA v2 = FrameA.init(  unused, 1.0, 0.0 )
    FrameA v3 = FrameA.init(  unused, 0.0, 1.0 )
    Frame frame = Frame.init( unused, v1, v2, v3 )
    painter( unused, frame )
    svg_end( unused )

# TODO: Have to pass len( sys.argv ) to force runtime evaluation




# TODO: take in 2 Segments instead of 4 floats
def void draw_line( int unused, float x1, float y1, float x2, float y2 ):
    svg_draw_line( unused, x1, y1, x2, y2 )

# TODO: not componentwise, when we can return an object
def float scale_vect_x( int unused, float s, FrameA v ):
    return s * v.x

def float scale_vect_y( int unused, float s, FrameA v ):
    return s * v.y

# TODO: not componentwise, when we can return an object
def float add_vect_x( int unused, FrameA v1, FrameA v2 ):
    return v1.x + v2.x

# TODO: If we change this return type to FrameA it should
#       produce a decent error about it not beign the right type
def float add_vect_y( int unused, FrameA v1, FrameA v2 ):
    return v1.y + v2.y

# TODO: use stuff like make_segments_painter when available
def float frame_coord_map_vector_x( int unused, Frame frame, FrameA v ):
    # TODO: remove all these intermediate vars
    # TODO: assign directly into FrameAs instead of passing to be modified

    FrameA sc1 = FrameA.init( unused, scale_vect_x( unused, v.x, frame.edge1 ), scale_vect_y( unused, v.x, frame.edge1 ) )

    FrameA sc2 = FrameA.init( unused, scale_vect_x( unused, v.y, frame.edge2 ), scale_vect_y( unused, v.y, frame.edge2 ) )

    FrameA summed = FrameA.init( unused, add_vect_x( unused, sc1, sc2 ), add_vect_y( unused, sc1, sc2 ) )

    FrameA ret = FrameA.init( unused, add_vect_x( unused, frame.origin, summed ), add_vect_y( unused, frame.origin, summed ) )

    return ret.x

def float frame_coord_map_vector_y( int unused, Frame frame, FrameA v ):

    FrameA sc1 = FrameA.init( unused, scale_vect_x( unused, v.x, frame.edge1 ), scale_vect_y( unused, v.x, frame.edge1 ) )

    FrameA sc2 = FrameA.init( unused, scale_vect_x( unused, v.y, frame.edge2 ), scale_vect_y( unused, v.y, frame.edge2 ) )

    FrameA summed = FrameA.init( unused, add_vect_x( unused, sc1, sc2 ), add_vect_y( unused, sc1, sc2 ) )

    FrameA ret = FrameA.init( unused, add_vect_x( unused, frame.origin, summed ), add_vect_y( unused, frame.origin, summed ) )

    return ret.y

def void diamond_painter( int unused, Frame frame ):
    FrameA tl = FrameA.init( unused, 0.5, 0.9 )
    FrameA tr = FrameA.init( unused, 0.9, 0.5 )
    FrameA br = FrameA.init( unused, 0.5, 0.1 )
    FrameA bl = FrameA.init( unused, 0.1, 0.5 )

    FrameA trans_tl = FrameA.init( unused, frame_coord_map_vector_x( unused, frame, tl ), frame_coord_map_vector_y( unused, frame, tl ) )
    FrameA trans_tr = FrameA.init( unused, frame_coord_map_vector_x( unused, frame, tr ), frame_coord_map_vector_y( unused, frame, tr ) )
    FrameA trans_br = FrameA.init( unused, frame_coord_map_vector_x( unused, frame, br ), frame_coord_map_vector_y( unused, frame, br ) )
    FrameA trans_bl = FrameA.init( unused, frame_coord_map_vector_x( unused, frame, bl ), frame_coord_map_vector_y( unused, frame, bl ) )

    draw_line( unused, trans_tl.x, trans_tl.y, trans_tr.x, trans_tr.y )
    draw_line( unused, trans_tr.x, trans_tr.y, trans_br.x, trans_br.y )
    draw_line( unused, trans_br.x, trans_br.y, trans_bl.x, trans_bl.y )
    draw_line( unused, trans_bl.x, trans_bl.y, trans_tl.x, trans_tl.y )

def void square_painter( int unused, Frame frame ):
    FrameA tl = FrameA.init( unused, 0.1, 0.9 )
    FrameA tr = FrameA.init( unused, 0.9, 0.9 )
    FrameA br = FrameA.init( unused, 0.9, 0.1 )
    FrameA bl = FrameA.init( unused, 0.1, 0.1 )

    FrameA trans_tl = FrameA.init( unused, frame_coord_map_vector_x( unused, frame, tl ), frame_coord_map_vector_y( unused, frame, tl ) )
    FrameA trans_tr = FrameA.init( unused, frame_coord_map_vector_x( unused, frame, tr ), frame_coord_map_vector_y( unused, frame, tr ) )
    FrameA trans_br = FrameA.init( unused, frame_coord_map_vector_x( unused, frame, br ), frame_coord_map_vector_y( unused, frame, br ) )
    FrameA trans_bl = FrameA.init( unused, frame_coord_map_vector_x( unused, frame, bl ), frame_coord_map_vector_y( unused, frame, bl ) )

    draw_line( unused, trans_tl.x, trans_tl.y, trans_tr.x, trans_tr.y )
    draw_line( unused, trans_tr.x, trans_tr.y, trans_br.x, trans_br.y )
    draw_line( unused, trans_br.x, trans_br.y, trans_bl.x, trans_bl.y )
    draw_line( unused, trans_bl.x, trans_bl.y, trans_tl.x, trans_tl.y )


def void two_squares_painter( int unused, Frame frame ):
    FrameA split_point = FrameA.init( unused, scale_vect_x( unused, 0.5, frame.edge1 ), scale_vect_y( unused, 0.5, frame.edge1 ) )
    Frame left_frame = Frame.init( unused, frame.origin, split_point, frame.edge2 )
    Frame right_frame = Frame.init( unused, split_point, split_point, frame.edge2 )
    square_painter( unused, left_frame )
    square_painter( unused, right_frame )


def void beside_painter( int unused, function( void, ( int, Frame ) ) painter1, function( void, ( int, Frame ) ) painter2, Frame frame ):
    "A bit like SICP beside, but is a painter, instead of returning a painter"
    FrameA split_point = FrameA.init( unused, scale_vect_x( unused, 0.5, frame.edge1 ), scale_vect_y( unused, 0.5, frame.edge1 ) )
    Frame left_frame = Frame.init( unused, frame.origin, split_point, frame.edge2 )
    Frame right_frame = Frame.init( unused, split_point, split_point, frame.edge2 )
    painter1( unused, left_frame )
    painter2( unused, right_frame )


#svg_document( len( sys.argv ), two_squares_painter )

# Possible solution with classes:
#
#interface Painter:
#    def void paint( int unused, Frame frame )
#
#class Square:
#    def_init( Square self, int unused ):
#        pass
#
#    def void paint( Square self, int unused, Frame frame ):
#
#        FrameA tl = FrameA.init( unused, 0.1, 0.9 )
#        FrameA tr = FrameA.init( unused, 0.9, 0.9 )
#        FrameA br = FrameA.init( unused, 0.9, 0.1 )
#        FrameA bl = FrameA.init( unused, 0.1, 0.1 )
#
#        FrameA trans_tl = FrameA.init( unused, frame_coord_map_vector_x( unused, frame, tl ), frame_coord_map_vector_y( unused, frame, tl ) )
#        FrameA trans_tr = FrameA.init( unused, frame_coord_map_vector_x( unused, frame, tr ), frame_coord_map_vector_y( unused, frame, tr ) )
#        FrameA trans_br = FrameA.init( unused, frame_coord_map_vector_x( unused, frame, br ), frame_coord_map_vector_y( unused, frame, br ) )
#        FrameA trans_bl = FrameA.init( unused, frame_coord_map_vector_x( unused, frame, bl ), frame_coord_map_vector_y( unused, frame, bl ) )
#
#        draw_line( unused, trans_tl.x, trans_tl.y, trans_tr.x, trans_tr.y )
#        draw_line( unused, trans_tr.x, trans_tr.y, trans_br.x, trans_br.y )
#        draw_line( unused, trans_br.x, trans_br.y, trans_bl.x, trans_bl.y )
#        draw_line( unused, trans_bl.x, trans_bl.y, trans_tl.x, trans_tl.y )
#
#implements(Painter) p = Square.init( len( sys.argv ) )
#
#class Beside:
#    def_init( Beside self, int unused, function( void, ( int, Frame ) ) painter1, function( void, ( int, Frame ) ) painter2 ):
#        var:
#            implements(Painter) self.p1 = painter1
#            implements(Painter) self.p2 = painter2
#
#    def void paint( Beside self, int unused, Frame frame ):
#
#        FrameA split_point = FrameA.init( unused, scale_vect_x( unused, 0.5, frame.edge1 ), scale_vect_y( unused, 0.5, frame.edge1 ) )
#        Frame left_frame = Frame.init( unused, frame.origin, split_point, frame.edge2 )
#        Frame right_frame = Frame.init( unused, split_point, split_point, frame.edge2 )
#        self.p1.paint( unused, left_frame )
#        self.p2.paint( unused, right_frame )
#
#
#
#
#def void svg_document_cls( int unused, implements(Painter) painter ):
#    svg_start( unused )
#    # TODO: have to make variables here instead of passing function calls as args
#    FrameA v1 = FrameA.init(  unused, 0.0, 0.0 )
#    FrameA v2 = FrameA.init(  unused, 1.0, 0.0 )
#    FrameA v3 = FrameA.init(  unused, 0.0, 1.0 )
#    Frame frame = Frame.init( unused, v1, v2, v3 )
#    painter.paint( unused, frame )
#    svg_end( unused )
#
#
#Square sq1 = Square.init()
#Square sq2 = Square.init()
#Beside beside = Beside.init( len( sys.argv), sq1, sq2 )
#
#svg_document_cls( len( sys.argv ), beside )
#

def void svg_document_beside( int unused, function(void,(int, Frame)) painter1, function(void,(int, Frame)) painter2 ):
    svg_start( unused )
    # TODO: have to make variables here instead of passing function calls as args
    FrameA v1 = FrameA.init(  unused, 0.0, 0.0 )
    FrameA v2 = FrameA.init(  unused, 1.0, 0.0 )
    FrameA v3 = FrameA.init(  unused, 0.0, 1.0 )
    Frame frame = Frame.init( unused, v1, v2, v3 )
    beside_painter( unused, painter1, painter2, frame )
    svg_end( unused )

int rt_hack = len( sys.argv )

svg_document_beside( rt_hack, diamond_painter, square_painter )



